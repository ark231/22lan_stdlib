#defmacro ifz dst
    \autoliteral l{#{dst}}
    ifz
#endmacro

#defmacro safeifz dst
    #ifz #{dst}
#endmacro

#defmacro goto dst
    #clr0
    xchg03
    xchg13
    xchg03
    #ifz #{dst}
#endmacro

#defmacro safegoto dst
    #clr0
    xchg03
    xchg13
    xchg03
    #ifz #{dst}
#endmacro

#defmacro xchg dst, src
    xchg#{dst}3
    xchg#{src}3
    xchg#{dst}3
#endmacro

#defmacro clr0
    ;save r2 to r3
    xchg23
    ;save r1_8 into s1
    push8s1
    ;load 0b100'0000 (ie. 64) to r1
    \pushl8 64
    #xchg 0,1
    pop8s0
    #xchg 0,1

    lshift
    #xchg 0,2

    ;restore r1_8 from s1
    pop8s1
    ;restore r2 from r3
    xchg23
#endmacro

#defmacro safecall dst
    \call #{dst}
#endmacro

;\autofunc std
;\@nand s0_64, s0_64 -> s0_64
startfunc
    #safecall pop64s0
    #xchg 0,1
    #safecall pop64s0
    nand
    #safecall push64r2tos0
    @{nand}
endfunc

;\autofunc std
;\@not s0_64 -> s0_64
;\r0: invalidated, r1: invalidated, r2: invalidated
startfunc
    #safecall dup64s0
    #safecall pop64s0
    #xchg 0,1
    #safecall pop64s0
    ;`a nand a` is equivalent to `not a`
    nand
    #safecall push64r2tos0
    @{not}
endfunc

;\autofunc std
;\@and s0_64, s0_64 -> s0_64
startfunc
    #safecall pop64s0
    #xchg 0,1
    #safecall pop64s0
    nand
    #safecall push64r2tos0
    #safecall not
    @{and}
endfunc

;\autofunc std
;\@or s0_64, s0_64 -> s0_64
startfunc
    ;`not ((not a) and (not b))` is equivalent to `a or b`
    #safecall not
    #safecall pop64s0
    #xchg 0,1
    #safecall push64s1
    #safecall not
    #safecall pop64s1
    #xchg 1,2
    #safecall push64r2tos0
    #safecall and
    #safecall not
    @{or}
endfunc

;\autofunc std
;\@xor s0_64, s0_64 -> s0_64
startfunc
    ;`(a or b) and (a nand b)` is equivalent to `a xor b`
    #safecall dup128s0
    #safecall or
    #safecall pop64s0
    #xchg 0,1
    #safecall push64s1
    #safecall nand
    #safecall pop64s1
    #xchg 1,2
    #safecall push64r2tos0
    #safecall and
    @{xor}
endfunc

;\autofunc std
;\@add s0_64, s0_64 -> s0_64
startfunc
    ;二番目の引数をr1に格納
    #safecall pop64s0
    #xchg 0,1
    #safecall push64s1
    #safecall pop64s0
    #xchg 0,2
    #safecall push64s2
    #safecall pop64s1
    #xchg 1,2
    #safecall push64r2tos0
    #safecall pop64s2
    #xchg 1,2

    #safeifz end

    ;r1にある2番めの引数をスタックの二番目に戻す
    #safecall push64s1
    #safecall pop64s0
    #xchg 0,2
    #safecall push64s2
    #safecall pop64s1
    #xchg 1,2
    #safecall push64r2tos0
    #safecall pop64s2
    #safecall push64r2tos0
    
    ;add((arg0 xor arg1) , (arg0 and arg1) << 1)
    #safecall dup128s0
    #safecall xor
    #safecall pop64s0
    #xchg 0,2
    #safecall push64s2
    #safecall and
    #safecall pop64s0
    #xchg 0,1
    \pushl8 1
    pop8s0
    #xchg 0,1
    lshift
    #safecall push64r2tos0
    #safecall pop64s2
    #safecall push64r2tos0
    #safecall add

    \autolabel end
    @{add}
endfunc

;\autofunc std
;\@sub s0_64, s0_64 -> s0_64
startfunc
    ;一番目の引数を退避
    #safecall pop64s0
    #xchg 0,2
    #safecall push64s2
    
    ;二番目の引数を2の補数に変換する
    #safecall not
    #clr0
    one
    pushl8
    pop8s0
    #xchg 0,2
    #safecall push64r2tos0
    #safecall add

    ;一番目の引数を戻す
    #safecall pop64s2
    #safecall push64r2tos0

    ;add(arg0 , add(1 , not arg1))
    #safecall add
    @{sub}
endfunc

#defmacro _dup64s0_loop_content
    ;duplicate top byte of s0 into s1 and s2
    pop8s0
    #xchg 1,0
    push8s1
    #xchg 2,1
    push8s2
#endmacro

;\autofunc std
;\@dup64s0 s0_64 -> s0_64, s0_64
startfunc

    #_dup64s0_loop_content
    #_dup64s0_loop_content
    #_dup64s0_loop_content
    #_dup64s0_loop_content
    #_dup64s0_loop_content
    #_dup64s0_loop_content
    #_dup64s0_loop_content
    #_dup64s0_loop_content

    ;s1からs0に移す
    ;ひっくり返っているので、pop/push64系は使えない。
    pop8s1
    #xchg 0,1
    push8s0

    pop8s1
    #xchg 0,1
    push8s0

    pop8s1
    #xchg 0,1
    push8s0

    pop8s1
    #xchg 0,1
    push8s0

    pop8s1
    #xchg 0,1
    push8s0

    pop8s1
    #xchg 0,1
    push8s0

    pop8s1
    #xchg 0,1
    push8s0

    pop8s1
    #xchg 0,1
    push8s0

    ;s2からs0に移す
    pop8s2
    #xchg 0,2
    push8s0

    pop8s2
    #xchg 0,2
    push8s0

    pop8s2
    #xchg 0,2
    push8s0

    pop8s2
    #xchg 0,2
    push8s0

    pop8s2
    #xchg 0,2
    push8s0

    pop8s2
    #xchg 0,2
    push8s0

    pop8s2
    #xchg 0,2
    push8s0

    pop8s2
    #xchg 0,2
    push8s0

    @{dup64s0}
endfunc

;\autofunc std
;\@dup128s0 s0_128 -> s0_128, s0_128
startfunc
    #safecall pop64s0
    #xchg 0,2
    #safecall push64s2
    #safecall dup64s0
    #safecall pop64s0
    #xchg 0,1
    #safecall push64s1
    #safecall pop64s2
    #safecall push64r2tos0
    #safecall dup64s0
    #safecall pop64s0
    #xchg 0,2
    #safecall push64s2
    #safecall pop64s1
    #xchg 1,2
    #safecall push64r2tos0
    #safecall pop64s2
    #safecall push64r2tos0
    @{dup128s0}
endfunc

;\autofunc std
;\@isp s0_64 -> s0_8
startfunc
    #safecall pop64s0
    xchg13
    xchg03
    xchg13
    #safeifz false

    xchg13
    xchg03
    xchg13
    \pushl8 -63
    xchg13
    xchg03
    pop8s0
    xchg03
    xchg13
    lshift
    xchg13
    xchg23
    xchg13
    #safeifz true

    \autolabel false
        \pushl8 0
        #safegoto end
    \autolabel true
        \pushl8 1

    \autolabel end
    @{isp}
endfunc

;\autofunc std
;\@isn s0_64 -> s0_8
startfunc
    #safecall dup64s0
    #safecall pop64s0
    xchg03
    xchg13
    xchg03
    #safeifz false
        #safecall isp
        #safecall bool_not
        #safegoto end
    \autolabel false
        \pushl8 0
    \autolabel end
    @{isn}
endfunc

;\autofunc std
;\@clr0 none -> r0_64
startfunc
    #clr0
    @{clr0}
endfunc

;\autofunc std
;\@pop64s0 s0_64 -> r0_64
;\r0: result, r1: const, r2: invalidated
startfunc
    ;save r1_8 into s1
    push8s1

    \pushl8 8
    #xchg 0,1
    pop8s0
    #xchg 0,1

    pop8s0
    lshift
    #xchg 0,2

    pop8s0
    lshift
    #xchg 0,2

    pop8s0
    lshift
    #xchg 0,2

    pop8s0
    lshift
    #xchg 0,2

    pop8s0
    lshift
    #xchg 0,2

    pop8s0
    lshift
    #xchg 0,2

    pop8s0
    lshift
    #xchg 0,2

    pop8s0

    ;restore r1_8 from s1
    pop8s1

    @{pop64s0}
endfunc

;\autofunc std
;\@pop64s1 s1_64 -> r1_64
startfunc
    \pushl8 8
    pop8s0
    ;now, r0 is 8, r1 is free, r2 is free

    pop8s1
    ;now, r0 is 8, r1 is result, r2 is free
    #xchg 0,1
    ;now, r0 is result, r1 is 8, r2 is free
    lshift
    ;now, r0 is free, r1 is 8, r2 is result
    #xchg 1,2
    ;now, r0 is free, r1 is result, r2 is 8 

    pop8s1
    ;now, r0 is free, r1 is result, r2 is 8 
    #xchg 0,1
    ;now, r0 is result, r1 is free, r2 is  8
    #xchg 1,2
    ;now, r0 is result, r1 is 8, r2 is free
    lshift
    ;now, r0 is free, r1 is 8, r2 is result
    #xchg 1,2

    pop8s1
    #xchg 0,1
    #xchg 1,2
    lshift 
    #xchg 1,2

    pop8s1
    #xchg 0,1
    #xchg 1,2
    lshift 
    #xchg 1,2

    pop8s1
    #xchg 0,1
    #xchg 1,2
    lshift 
    #xchg 1,2

    pop8s1
    #xchg 0,1
    #xchg 1,2
    lshift 
    #xchg 1,2

    pop8s1
    #xchg 0,1
    #xchg 1,2
    lshift 
    #xchg 1,2

    pop8s1
    @{pop64s1}
endfunc

;\autofunc std
;\@pop64s2 s2_64 -> r2_64
startfunc
    ;load 8 to r1_8
    \pushl8 8
    pop8s0
    #xchg 0,1

    pop8s2
    #xchg 0,2
    lshift

    pop8s2
    #xchg 0,2
    lshift

    pop8s2
    #xchg 0,2
    lshift

    pop8s2
    #xchg 0,2
    lshift

    pop8s2
    #xchg 0,2
    lshift

    pop8s2
    #xchg 0,2
    lshift

    pop8s2
    #xchg 0,2
    lshift

    pop8s2
    @{pop64s2}
endfunc

;\autofunc std
;\@push64r2tos0 r2_64 -> s0_64 
;\r0: invalidated, r1: const, r2: invalidated
startfunc

    ;save r1_8 into s1
    push8s1

    \pushl8 -8
    #xchg 0,1
    pop8s0
    #xchg 0,1

    #xchg 0,2

    push8s0
    lshift
    #xchg 0,2

    push8s0
    lshift
    #xchg 0,2

    push8s0
    lshift
    #xchg 0,2

    push8s0
    lshift
    #xchg 0,2

    push8s0
    lshift
    #xchg 0,2

    push8s0
    lshift
    #xchg 0,2

    push8s0
    lshift
    #xchg 0,2

    push8s0

    ;restore r1_8 from s1
    pop8s1

    @{push64r2tos0}
endfunc

;\autofunc std
;\@push64s1 r1_64 -> s1_64
startfunc
    push8s1
    \pushl8 -8
    pop8s0
    #xchg 0,1

    lshift
    #xchg 1,2
    push8s1
    #xchg 0,1
    #xchg 1,2

    lshift
    #xchg 1,2
    push8s1
    #xchg 0,1
    #xchg 1,2

    lshift
    #xchg 1,2
    push8s1
    #xchg 0,1
    #xchg 1,2

    lshift
    #xchg 1,2
    push8s1
    #xchg 0,1
    #xchg 1,2

    lshift
    #xchg 1,2
    push8s1
    #xchg 0,1
    #xchg 1,2

    lshift
    #xchg 1,2
    push8s1
    #xchg 0,1
    #xchg 1,2

    lshift
    #xchg 1,2
    push8s1
    #xchg 0,1
    #xchg 1,2

    @{push64s1}
endfunc

;\autofunc std
;\@push64s2 r2_64 -> s2_64
startfunc
    push8s2
    \pushl8 -8
    pop8s0
    #xchg 0,1
    #xchg 0,2

    lshift
    push8s2
    #xchg 0,2

    lshift
    push8s2
    #xchg 0,2

    lshift
    push8s2
    #xchg 0,2

    lshift
    push8s2
    #xchg 0,2

    lshift
    push8s2
    #xchg 0,2

    lshift
    push8s2
    #xchg 0,2

    lshift
    push8s2
    #xchg 0,2

    @{push64s2}
endfunc

;\autofunc std
;\@ext8to64s0 s0_8 -> s0_64
startfunc
    pushl8
    pushl8
    pushl8
    pushl8
    pushl8
    pushl8
    pushl8
    @{ext8to64s0}
endfunc

;\autofunc std
;\@bool_not s0_8 -> s0_8
startfunc
    #clr0
    pop8s0
    xchg03
    xchg13
    xchg03
    #safeifz true
        ;false
        \pushl8 0
        pushl8
        #safegoto end
    \autolabel true
        \pushl8 0
        pushl8
    \autolabel end
    @{bool_not}
endfunc

;\autofunc std
;\@bool_and s0_8, s0_8 -> s0_8
startfunc
    pop8s0
    #xchg 0,1
    push8s1
    #safecall ext8to64s0
    pop8s1
    #xchg 0,1
    push8s0
    #safecall ext8to64s0
    #safecall and
    #safecall to_bool
    @{bool_and}
endfunc

;\autofunc std
;\@bool_or s0_8, s0_8 -> s0_8
startfunc
    pop8s0
    #xchg 0,1
    push8s1
    #safecall ext8to64s0
    pop8s1
    #xchg 0,1
    push8s0
    #safecall ext8to64s0
    #safecall or
    #safecall to_bool
    @{bool_or}
endfunc

;\autofunc std
;\@bool_xor s0_8, s0_8 -> s0_8
startfunc
    pop8s0
    #xchg 0,1
    push8s1
    #safecall ext8to64s0
    pop8s1
    #xchg 0,1
    push8s0
    #safecall ext8to64s0
    #safecall xor
    #safecall to_bool
    @{bool_xor}
endfunc

;\autofunc std
;\@to_bool s0_64 -> s0_8
startfunc
    #safecall pop64s0
    #xchg 0,1
    #safeifz false
        \pushl8 1
        #safegoto end
    \autolabel false
        \pushl8 0
    \autolabel end
    @{to_bool}
endfunc
